{
  "components": {
    "schemas": {
      "Finding": {
        "properties": {
          "registrant_city": {
            "type": "string"
          },
          "city_name": {
            "type": "string"
          },
          "registrant_zip": {
            "type": "string"
          },
          "asset_value_numeric": {
            "type": "string"
          },
          "metro_code": {
            "type": "string"
          },
          "registry_tech_id": {
            "type": "string"
          },
          "severity_numeric": {
            "type": "string"
          },
          "finding_data_description": {
            "type": "string"
          },
          "finding_subtype": {
            "type": "string"
          },
          "continent_name": {
            "type": "string"
          },
          "admin_email": {
            "type": "string"
          },
          "auth_detected": {
            "type": "string"
          },
          "admin_street": {
            "type": "string"
          },
          "tech_name": {
            "type": "string"
          },
          "tech_city": {
            "type": "string"
          },
          "name_server": {
            "type": "string"
          },
          "tech_phone": {
            "type": "string"
          },
          "scan": {
            "type": "string"
          },
          "finding_auto_comments": {
            "type": "string"
          },
          "registrant_phone_ext": {
            "type": "string"
          },
          "registrant_org": {
            "type": "string"
          },
          "false_positive": {
            "type": "string"
          },
          "country_name": {
            "type": "string"
          },
          "last_seen": {
            "type": "string"
          },
          "priority": {
            "type": "string"
          },
          "hosting_provider": {
            "type": "string"
          },
          "latitude": {
            "type": "string"
          },
          "finding_type": {
            "type": "string"
          },
          "registrant_name": {
            "type": "string"
          },
          "registrant_phone": {
            "type": "string"
          },
          "security_domain": {
            "type": "string"
          },
          "vendor": {
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          },
          "domain_name": {
            "type": "string"
          },
          "admin_phone": {
            "type": "string"
          },
          "state_abbrev": {
            "type": "string"
          },
          "finding_detail": {
            "type": "string"
          },
          "tech_email": {
            "type": "string"
          },
          "ip_address": {
            "type": "string"
          },
          "analyst_status": {
            "type": "string"
          },
          "tech_org": {
            "type": "string"
          },
          "registrar_id": {
            "type": "string"
          },
          "expires_on": {
            "type": "string"
          },
          "registrar_abuse_email": {
            "type": "string"
          },
          "finding": {
            "type": "string"
          },
          "registrar_iana": {
            "type": "string"
          },
          "host_name": {
            "type": "string"
          },
          "analysis_id": {
            "type": "string"
          },
          "registrant_country": {
            "type": "string"
          },
          "finding_id": {
            "type": "string"
          },
          "admin_city": {
            "type": "string"
          },
          "form_field_types_detected": {
            "type": "string"
          },
          "tech_zip": {
            "type": "string"
          },
          "finding_context": {
            "type": "string"
          },
          "auto_status": {
            "type": "string"
          },
          "admin_zip": {
            "type": "string"
          },
          "asset_value": {
            "type": "string"
          },
          "admin_name": {
            "type": "string"
          },
          "record_load_timestamp": {
            "type": "string"
          },
          "registrant_email": {
            "type": "string"
          },
          "admin_country": {
            "type": "string"
          },
          "admin_phone_ext": {
            "type": "string"
          },
          "hosting_type": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          },
          "registrar": {
            "type": "string"
          },
          "longitude": {
            "type": "string"
          },
          "industry": {
            "type": "string"
          },
          "admin_org": {
            "type": "string"
          },
          "is_web": {
            "type": "string"
          },
          "service": {
            "type": "string"
          },
          "finding_data_value": {
            "type": "string"
          },
          "toe_id": {
            "type": "string"
          },
          "finding_extra_data_value": {
            "type": "string"
          },
          "state_name": {
            "type": "string"
          },
          "tech_street": {
            "type": "string"
          },
          "registrar_abuse_phone": {
            "type": "string"
          },
          "registrar_expire_date": {
            "type": "string"
          },
          "continent_code": {
            "type": "string"
          },
          "security_criteria": {
            "type": "string"
          },
          "registrant_street": {
            "type": "string"
          },
          "shared_ip": {
            "type": "string"
          },
          "tech_country": {
            "type": "string"
          },
          "first_seen": {
            "type": "string"
          },
          "country_iso_code": {
            "type": "string"
          }
        },
        "title": "Finding",
        "type": "object"
      },
      "Findings": {
        "description": "A collection of Findings for a given analysis. For V2, this schema is a bit misleading since swagger doesn't currently provide a way to describe streaming Newline delimited JSON responses.  However, that is what all of these responses are.  We were having issues with timeouts and streaming made more sense for various reasons on larger analyses.",
        "items": {
          "$ref": "#/components/schemas/Finding"
        },
        "title": "Findings",
        "type": "array"
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "bearerFormat": "JWT",
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": {
    "title": "Customer APIs V2",
    "version": "2.0"
  },
  "openapi": "3.0.1",
  "paths": {
    "/v2/findings/{toe_id}": {
      "get": {
        "callbacks": {},
        "deprecated": false,
        "description": "Streaming Newline delimited JSON response containing findings for latest analysis for a given TOE. Use include_all param to include all findings. Swagger didn't have a way of showing this so please don't let the schema of mislead you with the array of findings.  Unfortunately, swagger UI can't format the streamed response but the given curl example will execute.",
        "operationId": "CustomerApisWeb.V2.FindingController.index",
        "parameters": [
          {
            "description": "Toe ID",
            "in": "path",
            "name": "toe_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "include all findings including those that passed",
            "in": "query",
            "name": "include_all",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "filter findings based on customer risk policy",
            "in": "query",
            "name": "risk_policy",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "filter results by asset_value. The swagger UI doesn't show this well but an example of a query string with multiple asset_values would look like ?asset_value[]=high&asset_value[]=low",
            "explode": true,
            "in": "query",
            "name": "asset_value[]",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "filter results by asset_value_numeric. The swagger UI doesn't show this well but an example of a query string with multiple asset_value_numeric values would look like ?asset_value_numeric[]=1&asset_value_numeric[]=3",
            "explode": true,
            "in": "query",
            "name": "asset_value_numeric[]",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "filter results by priority. The swagger UI doesn't show this well but an example of a query string with multiple priority values would look like ?priority[]=1&priority[]=3",
            "explode": true,
            "in": "query",
            "name": "priority[]",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "filter results by severity. The swagger UI doesn't show this well but an example of a query string with multiple severities would look like ?severity[]=low&severity[]=medium&severity[]=high",
            "explode": true,
            "in": "query",
            "name": "severity[]",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "filter results by severity_numeric. The swagger UI doesn't show this well but an example of a query string with multiple severities would look like ?severity_numeric[]=1.0&severity_numeric[]=3.0",
            "explode": true,
            "in": "query",
            "name": "severity_numeric[]",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/x-ndjson": {
                "schema": {
                  "$ref": "#/components/schemas/Findings"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "404": {
            "content": {},
            "description": "Not found"
          }
        },
        "summary": "Streaming Newline delimited JSON response containing findings for latest analysis for a given TOE. Swagger didn't have a way of showing this so please don't let the schema of mislead you with the array of findings",
        "tags": [
          "Finding"
        ]
      }
    },
    "/v2/findings/{toe_id}/finding/{finding_id}": {
      "get": {
        "callbacks": {},
        "deprecated": false,
        "description": "Retrieve finding given toe id and finding id",
        "operationId": "CustomerApisWeb.V2.FindingController.show",
        "parameters": [
          {
            "description": "Toe ID",
            "in": "path",
            "name": "toe_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Finding ID",
            "in": "path",
            "name": "finding_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Finding"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "404": {
            "content": {},
            "description": "Not found"
          }
        },
        "summary": "Retrieve finding given toe id and finding id",
        "tags": [
          "Finding"
        ]
      }
    },
    "/v2/findings/{toe_id}/security_domain/{security_domain}": {
      "get": {
        "callbacks": {},
        "deprecated": false,
        "description": "Streaming Newline delimited JSON response containing findings for latest analysis for a given TOE and security domain. Use include_all param to include all findings.  Unfortunately, swagger UI can't format the streamed response but the given curl example will execute.",
        "operationId": "CustomerApisWeb.V2.FindingController.by_security_domain",
        "parameters": [
          {
            "description": "Toe ID",
            "in": "path",
            "name": "toe_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Security Domain",
            "in": "path",
            "name": "security_domain",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "include all findings including those that passed",
            "in": "query",
            "name": "include_all",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "filter findings based on customer risk policy",
            "in": "query",
            "name": "risk_policy",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/x-ndjson": {
                "schema": {
                  "$ref": "#/components/schemas/Findings"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "404": {
            "content": {},
            "description": "Not found"
          }
        },
        "summary": "Streaming Newline delimited JSON response containing findings for latest analysis for a given TOE and security domain. Swagger didn't have a way of showing this so please don't let the schema of mislead you with the array of findings",
        "tags": [
          "Finding"
        ]
      }
    },
    "/v2/findings/{toe_id}/security_domain/{security_domain}/security_criteria/{security_criteria}": {
      "get": {
        "callbacks": {},
        "deprecated": false,
        "description": "Streaming Newline delimited JSON response containing findings for latest analysis for a given TOE, security domain and security_criteria. Use include_all param to include all findings.  Unfortunately, swagger UI can't format the streamed response but the given curl example will execute.",
        "operationId": "CustomerApisWeb.V2.FindingController.by_security_criteria",
        "parameters": [
          {
            "description": "Toe ID",
            "in": "path",
            "name": "toe_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Security Domain",
            "in": "path",
            "name": "security_domain",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Security Criteria",
            "in": "path",
            "name": "security_criteria",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "include all findings including those that passed",
            "in": "query",
            "name": "include_all",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "filter findings based on customer risk policy",
            "in": "query",
            "name": "risk_policy",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/x-ndjson": {
                "schema": {
                  "$ref": "#/components/schemas/Findings"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "404": {
            "content": {},
            "description": "Not found"
          }
        },
        "summary": "Streaming Newline delimited JSON response containing findings for latest analysis for a given TOE, security domain and security criteria. Swagger didn't have a way of showing this so please don't let the schema of mislead you with the array of findings",
        "tags": [
          "Finding"
        ]
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "servers": [
    {
      "url": "https://api.sandbox.riskrecon.com",
      "variables": {
        "protocol": {
          "default": "https",
          "enum": [
            "http",
            "https"
          ]
        }
      }
    },
    {
      "url": "/",
      "variables": {
        "protocol": {
          "default": "https",
          "enum": [
            "http",
            "https"
          ]
        }
      }
    }
  ],
  "tags": []
}
